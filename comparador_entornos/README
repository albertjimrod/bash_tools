# 🐍 Conda Environment Comparator

Una herramienta de línea de comandos en Bash para comparar paquetes instalados entre diferentes entornos de Conda, generando una matriz visual que facilita la identificación de diferencias y similitudes.

## 📋 Tabla de Contenidos

- [Características](#-características)
- [Requisitos](#-requisitos)
- [Instalación](#-instalación)
- [Uso](#-uso)
- [Ejemplos](#-ejemplos)
- [Salida](#-salida)
- [Opciones](#-opciones)
- [Solución de Problemas](#-solución-de-problemas)
- [Contribución](#-contribución)
- [Licencia](#-licencia)

## ✨ Características

- 🔍 **Análisis automático** de todos los entornos Conda disponibles
- 📊 **Matriz visual** mostrando presencia/ausencia de paquetes por entorno
- 📁 **Exportación CSV** para análisis posterior
- 🎨 **Interfaz colorizada** para mejor legibilidad
- 📈 **Estadísticas detalladas** del análisis
- ⚡ **Procesamiento eficiente** usando JSON parsing
- 🛡️ **Manejo robusto de errores**

## 📋 Requisitos

- **Conda/Miniconda/Anaconda** instalado y configurado
- **Bash** 4.0 o superior
- **Python 3** (para procesamiento JSON)
- Sistema operativo: Linux, macOS, o WSL en Windows

## 🚀 Instalación

### Método 1: Descarga directa

```bash
# Descargar el script
wget https://raw.githubusercontent.com/tu-usuario/conda-env-comparator/main/comparador_entornos.sh

# Dar permisos de ejecución
chmod +x comparador_entornos.sh
```

### Método 2: Clonar repositorio

```bash
# Clonar el repositorio
git clone https://github.com/tu-usuario/conda-env-comparator.git
cd conda-env-comparator

# Dar permisos de ejecución
chmod +x comparador_entornos.sh
```

### Método 3: Instalación global (opcional)

```bash
# Mover a directorio en PATH
sudo mv comparador_entornos.sh /usr/local/bin/conda-compare

# Ahora puedes usar desde cualquier lugar
conda-compare --help
```

## 💻 Uso

### Sintaxis básica

```bash
./comparador_entornos.sh [opciones]
```

### Opciones disponibles

| Opción | Descripción |
|--------|-------------|
| `-h, --help` | Muestra la ayuda |
| `-o, --output ARCHIVO` | Guarda el resultado en archivo CSV |
| `-v, --verbose` | Muestra información detallada durante el proceso |

## 📖 Ejemplos

### Análisis básico

```bash
./comparador_entornos.sh
```

### Guardar resultados en CSV

```bash
./comparador_entornos.sh --output mi_comparacion.csv
```

### Modo detallado con exportación

```bash
./comparador_entornos.sh -v -o entornos_$(date +%Y%m%d).csv
```

### Ver ayuda

```bash
./comparador_entornos.sh --help
```

## 📊 Salida

### Salida en consola

```
🔍 Analizando entornos de Conda...
Entornos encontrados: 3
📦 Recopilando paquetes de todos los entornos...
📊 Total de paquetes únicos encontrados: 247

🗂️  Matriz de Comparación de Entornos
==================================================================
Paquete                        base         datascience  ml_env      
------------------------------  ------------  ------------  ------------
numpy                          ✅           ✅           ✅          
pandas                         ❌           ✅           ✅          
tensorflow                     ❌           ❌           ✅          
matplotlib                     ✅           ✅           ✅          
scipy                          ❌           ✅           ✅          
...

==================================================================
📈 Estadísticas:
  • Entornos analizados: 3
  • Paquetes únicos: 247
  • Archivo CSV generado: mi_comparacion.csv

✨ Análisis completado exitosamente

Leyenda:
  ✅ = Paquete instalado en el entorno
  ❌ = Paquete no instalado en el entorno
```

### Archivo CSV

El archivo CSV generado tendrá el siguiente formato:

```csv
Paquete,base,datascience,ml_env
numpy,✅,✅,✅
pandas,❌,✅,✅
tensorflow,❌,❌,✅
matplotlib,✅,✅,✅
```

## 🔧 Casos de Uso

### 1. Auditoría de entornos

Identifica qué paquetes están instalados en cada entorno para mantener consistencia:

```bash
./comparador_entornos.sh -o auditoria_$(date +%Y%m%d).csv
```

### 2. Migración de entornos

Antes de migrar o replicar un entorno, verifica qué paquetes necesitas:

```bash
./comparador_entornos.sh -v
```

### 3. Limpieza de entornos

Identifica paquetes duplicados o innecesarios en múltiples entornos:

```bash
./comparador_entornos.sh -o limpieza.csv
# Analizar el CSV para encontrar patrones
```

### 4. Documentación de proyecto

Genera documentación automática de las dependencias por entorno:

```bash
./comparador_entornos.sh -o dependencias_proyecto.csv
```

## 🐛 Solución de Problemas

### Error: "No se pudo inicializar Conda"

**Problema**: El script no puede encontrar Conda.

**Solución**:
```bash
# Verificar que Conda esté en PATH
which conda

# Si no está, añadir a .bashrc o .zshrc
echo 'export PATH="$HOME/anaconda3/bin:$PATH"' >> ~/.bashrc
source ~/.bashrc
```

### Error: "No se encontraron entornos de Conda"

**Problema**: No hay entornos Conda disponibles.

**Solución**:
```bash
# Verificar entornos disponibles
conda info --envs

# Crear un entorno de prueba si es necesario
conda create -n test_env python=3.8
```

### Salida truncada o mal formateada

**Problema**: Los nombres de entornos o paquetes son muy largos.

**Solución**: El script ajusta automáticamente el formato, pero puedes usar la salida CSV para análisis detallado:

```bash
./comparador_entornos.sh -o resultados.csv
```

### Rendimiento lento

**Problema**: El análisis toma mucho tiempo con muchos entornos.

**Solución**: Usa el modo verbose para monitorear el progreso:

```bash
./comparador_entornos.sh -v -o resultados.csv
```

## 🔍 Análisis Avanzado

### Usar con herramientas de análisis

```bash
# Generar CSV y analizarlo con Python
./comparador_entornos.sh -o data.csv
python -c "
import pandas as pd
df = pd.read_csv('data.csv')
print('Paquetes comunes a todos los entornos:')
print(df[df.iloc[:,1:].eq('✅').all(axis=1)]['Paquete'].tolist())
"
```

### Filtrar resultados

```bash
# Solo mostrar paquetes que empiecen con 'py'
./comparador_entornos.sh | grep "^py"
```

## 🤝 Contribución

¡Las contribuciones son bienvenidas! Por favor:

1. Fork el repositorio
2. Crea una rama para tu feature (`git checkout -b feature/nueva-caracteristica`)
3. Commit tus cambios (`git commit -am 'Añadir nueva característica'`)
4. Push a la rama (`git push origin feature/nueva-caracteristica`)
5. Abre un Pull Request

### Ideas para contribuir

- [ ] Soporte para otros gestores de paquetes (pip, pipenv)
- [ ] Interfaz web básica
- [ ] Comparación de versiones de paquetes
- [ ] Filtros por categorías de paquetes
- [ ] Integración con GitHub Actions

## 📝 Changelog

### v1.0.0 (2025-06-19)
- ✨ Versión inicial
- 📊 Matriz de comparación básica
- 📁 Exportación CSV
- 🎨 Interfaz colorizada
- 📈 Estadísticas básicas

## 📄 Licencia

Este proyecto está bajo la Licencia MIT. Ver el archivo [LICENSE](LICENSE) para más detalles.

## 👨‍💻 Autor

Creado con ❤️ para la comunidad de data science y desarrollo con Python.

---

**⭐ Si este proyecto te fue útil, considera darle una estrella en GitHub!**

## 📞 Soporte

¿Tienes preguntas o problemas?

- 🐛 [Reportar un bug](https://github.com/tu-usuario/conda-env-comparator/issues)
- 💡 [Solicitar una característica](https://github.com/tu-usuario/conda-env-comparator/issues)
- 📧 [Contacto directo](mailto:tu-email@ejemplo.com)

## 🙏 Agradecimientos

- Comunidad de Conda por el excelente gestor de paquetes
- Contribuidores que han mejorado esta herramienta
- Usuarios que han reportado bugs
